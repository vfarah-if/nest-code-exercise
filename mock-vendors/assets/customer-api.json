{
  "openapi": "3.0.0",
  "paths": {
    "/v1/customers": {
      "post": {
        "operationId": "CustomerControllerV1_register",
        "summary": "Create Customer",
        "parameters": [
          {
            "name": "X-Newlook-Identity-Token",
            "in": "header",
            "description": "An optional header to include the Id Token in the format 'Bearer idToken'. This supplies the anonymous or New Look id to enable extra functionality",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The record has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Customers"]
      },
      "get": {
        "operationId": "CustomerControllerV1_getProfile",
        "summary": "Get Customer Profile",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Profile has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Customers"],
        "security": [
          {
            "Authorization": []
          },
          {
            "X-Newlook-Identity-Token": []
          }
        ]
      },
      "put": {
        "operationId": "CustomerControllerV1_updateProfile",
        "summary": "Update Customer Profile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Profile has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Customers"],
        "security": [
          {
            "Authorization": []
          },
          {
            "X-Newlook-Identity-Token": []
          }
        ]
      }
    },
    "/v1/customers/recentsearches": {
      "get": {
        "operationId": "CustomerControllerV1_getRecentSearches",
        "summary": "Get Recent Searches",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Recent searches has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentSearchesModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Customers"],
        "security": [
          {
            "Authorization": []
          },
          {
            "X-Newlook-Identity-Token": []
          }
        ]
      },
      "patch": {
        "operationId": "CustomerControllerV1_updateRecentSearches",
        "summary": "Update Customer Recent Searches",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecentSearchesUpdateModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recent Searches has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentSearchesModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Customers"],
        "security": [
          {
            "Authorization": []
          },
          {
            "X-Newlook-Identity-Token": []
          }
        ]
      },
      "delete": {
        "operationId": "CustomerControllerV1_deleteRecentSearches",
        "summary": "Delete Recent Searches",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Recent searches has been successfully deleted."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Customers"],
        "security": [
          {
            "Authorization": []
          },
          {
            "X-Newlook-Identity-Token": []
          }
        ]
      }
    },
    "/v1/customers/credential": {
      "post": {
        "operationId": "CustomerControllerV1_changePassword",
        "summary": "Change Customer Password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPasswordModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Password has been successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Customers"],
        "security": [
          {
            "Authorization": []
          },
          {
            "X-Newlook-Identity-Token": []
          }
        ]
      }
    },
    "/v1/oauth2/token": {
      "post": {
        "operationId": "AuthControllerV1_token",
        "summary": "Issue access token for a email and password / refresh token / anonymous",
        "parameters": [
          {
            "name": "X-Newlook-Identity-Token",
            "in": "header",
            "description": "An optional header to include the Id Token in the format 'Bearer idToken'. This supplies the anonymous or New Look id to enable extra functionality",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequestModel"
              },
              "examples": {
                "emailPasswordExample": {
                  "summary": "email and password",
                  "description": "login with email and password. Error code which you get are NL-PROPERTY-REQUEST-MALFORMED,   NL-PROPERTY-EMAIL-MALFORMED , NL-PROPERTY-PASSWORD-MALFORMED <br /> <br /> grantType value shaould be password,refresh_token,anonymous",
                  "value": {
                    "email": "testuser@newlook.com",
                    "password": "Test123",
                    "grantType": "password"
                  }
                },
                "refreshTokenExample": {
                  "summary": "refresh token",
                  "description": "login with refresh token. Error code which you get are NL-PROPERTY-REQUEST-MALFORMED,  NL-PROPERTY-REFRESHTOKEN-MALFORMED <br /> <br /> grantType value shaould be password,rfresh_token,anonymous",
                  "value": {
                    "refreshToken": "refreshtokenshouldbehere",
                    "grantType": "refresh_token"
                  }
                },
                "anonymousTokenExample": {
                  "summary": "anonymous",
                  "description": "login with empty request to get token for anonymous user  <br /> <br /> grantType value shaould be password,refresh_token,anonymous",
                  "value": {
                    "grantType": "anonymous"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Auth"]
      }
    },
    "/v1/oauth2/keys": {
      "get": {
        "operationId": "AuthControllerV1_getTokenKeySet",
        "summary": "Provide a public keyset for verifying access token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TokenKeySetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Auth"]
      },
      "post": {
        "operationId": "AuthControllerV1_keys",
        "summary": "Create a private keyset",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TokenKeySetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Auth"]
      }
    },
    "/v1/oauth2/reset-password": {
      "post": {
        "operationId": "AuthControllerV1_sendResetPasswordEmail",
        "summary": "Send reset customer password email",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthResetPasswordRequestModel"
              },
              "examples": {
                "sendResetPasswordEmail": {
                  "summary": "Send reset customer password email",
                  "description": "Customer forgot their password and wants to reset by email",
                  "value": {
                    "email": "testuser@newlook.com",
                    "operationType": "send_password_email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthOperationsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Auth"]
      }
    },
    "/v1/oauth2/revoke": {
      "delete": {
        "operationId": "AuthControllerV1_logout",
        "summary": "Logout user and revoke refresh token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged out and refresh token has been successfully revoked"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Auth"]
      }
    },
    "/v1/health": {
      "get": {
        "operationId": "HealthControllerV1_getHealth",
        "summary": "Provides a health check for the domain service",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          }
        },
        "tags": ["Health"]
      }
    }
  },
  "info": {
    "title": "customer-api",
    "description": "Customer API Documentation",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "X-Newlook-Identity-Token": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Identity Token in the format \"Bearer idToken\"",
        "type": "apiKey",
        "in": "header",
        "name": "X-Newlook-Identity-Token"
      },
      "Authorization": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Access Token in the format \"Bearer accessToken\"",
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "schemas": {
      "CustomerCreateModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "maxLength": 255,
            "minLength": 7
          },
          "firstName": {
            "type": "string",
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "maxLength": 50
          }
        },
        "required": ["email", "password", "firstName", "lastName"]
      },
      "CustomerModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "x-faker": "internet.email"
          },
          "firstName": {
            "type": "string",
            "x-faker": "name.firstName"
          },
          "lastName": {
            "type": "string",
            "x-faker": "name.lastName"
          },
          "mobileNumber": {
            "type": "string",
            "x-faker": "phone.phoneNumber"
          },
          "dateOfBirth": {
            "type": "string",
            "x-faker": "date.past(20)"
          },
          "gender": {
            "type": "string",
            "x-faker": "name.gender"
          }
        },
        "required": ["email", "firstName", "lastName"]
      },
      "ExceptionCausesModel": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "errorReason": {
            "type": "string"
          },
          "unhandledErrorCode": {
            "type": "string"
          },
          "unhandledErrorReason": {
            "type": "string"
          }
        },
        "required": ["errorCode", "errorReason"]
      },
      "ExceptionModel": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "causes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExceptionCausesModel"
            }
          },
          "response": {
            "type": "object"
          }
        },
        "required": ["statusCode", "timestamp", "path", "message"]
      },
      "RecentSearchesModel": {
        "type": "object",
        "properties": {
          "recentSearches": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["recentSearches"]
      },
      "CustomerUpdateModel": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "maxLength": 50
          },
          "mobileNumber": {
            "type": "string",
            "maxLength": 100
          },
          "dateOfBirth": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          }
        },
        "required": ["firstName", "lastName"]
      },
      "CustomerPasswordModel": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          },
          "oldPassword": {
            "type": "string",
            "maxLength": 255,
            "minLength": 7
          },
          "newPassword": {
            "type": "string",
            "maxLength": 255,
            "minLength": 7
          }
        },
        "required": ["refreshToken", "oldPassword", "newPassword"]
      },
      "RecentSearchesUpdateModel": {
        "type": "object",
        "properties": {
          "recentSearches": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "operation": {
            "type": "string",
            "enum": ["ADD", "DELETE"]
          }
        },
        "required": ["recentSearches", "operation"]
      },
      "TokenRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "grantType": {
            "type": "string"
          }
        },
        "required": ["grantType"]
      },
      "TokenResponseModel": {
        "type": "object",
        "properties": {
          "expiresIn": {
            "type": "number"
          },
          "accessToken": {
            "type": "string"
          },
          "idToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": ["expiresIn", "accessToken", "idToken", "refreshToken"]
      },
      "TokenKeySetModel": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["keys"]
      },
      "AuthResetPasswordRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "passwordResetToken": {
            "type": "string"
          },
          "newPassword": {
            "type": "string",
            "maxLength": 255,
            "minLength": 7
          },
          "operationType": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "passwordResetToken",
          "newPassword",
          "operationType"
        ]
      },
      "AuthOperationsModel": {
        "type": "object",
        "properties": {
          "operationType": {
            "type": "string"
          },
          "passwordResetToken": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "operationType",
          "passwordResetToken",
          "newPassword",
          "email"
        ]
      },
      "RevokeRequestModel": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        },
        "required": ["refreshToken"]
      },
      "HealthCheckModel": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          }
        },
        "required": ["version"]
      }
    }
  }
}
